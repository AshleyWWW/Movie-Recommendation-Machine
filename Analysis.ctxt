#BlueJ class context
comment0.target=Analysis
comment0.text=\n\ Analyzes\ movie\ data.\ \n\ At\ the\ moment,\ only\ ID,\ title,\ year,\ director/actor\ people,\ soon\ genre\n\ \n\ @author\ Ashley\ Wang\ \n\ @version\ 0.1\n
comment1.params=
comment1.target=Analysis()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Analysis\n
comment10.params=info
comment10.target=int\ dealWithInfo(java.lang.String[])
comment10.text=\n\ Accepts\ a\ 1D\ array\ of\ all\ the\ movie's\ information,\ \n\ parses,\ and\ otherwise\ deals\ with\ it.\ \n\n\ @param\ \ info\ the\ String\ array\ of\ info\n\ @return\ \ \ \ \ the\ overall\ likeability\ \n
comment11.params=info\ adjPos
comment11.target=int\ dealWithInfo(java.lang.String[],\ int[])
comment11.text=\n\ A\ version\ that\ calculates\ the\ likeability\ of\ \n\ all\ the\ adjective\ fields\ based\ on\ a\ legend\ that\ \n\ says\ where\ they\ are.\ \n\ Accepts\ a\ 1D\ array\ of\ all\ the\ movie's\ information,\ \n\ parses,\ and\ otherwise\ deals\ with\ it.\ \n\ Position\ 0\ is\ ID\n\ 1\ is\ the\ normal\ name.\ \n\ 2\ is\ a\ comma-separated\ list\ of\ genres/adjectives/tags/actors/etc\n\ 5\ is\ the\ rating.\ \n\ 4\ is\ the\ year.\ \n\ 3\ is\ the\ array\ of\ actors/directors/other\ real\ things\n\ 6\ is\ the\ array\ of\ keywords\n\ Not\ all\ things\ have\ been\ implemented\ fully.\ \n\n\ @param\ \ info\ the\ String\ array\ of\ info\n\ @param\ the\ positions\ of\ the\ adjectives\n\ @return\ \ \ \ \ the\ overall\ likeability\ \n
comment12.params=n
comment12.target=java.lang.String\ genNum(int)
comment12.text=\n\ Make\ the\ number\ for\ tt___\n\n\ @param\ \ n\ \ \ a\ sample\ parameter\ for\ a\ method\n\ @return\ \ \ \ \ the\ string\ version\n
comment2.params=strs\ s
comment2.target=int\ indexOf(java.lang.String[],\ java.lang.String)
comment2.text=\n\ @param\ \ strs\ String\ array\ to\ look\ in\n\ @param\ s\ the\ String\ to\ look\ for\n\ @return\ \ \ \ \ the\ index\ number\n
comment3.params=t
comment3.target=void\ setTraitList(java.lang.String[][])
comment3.text=\n\ Set\ the\ list\ of\ traits.\ \n\n\ @param\ \ t\ \ \ array\ of\ trait\ Strings\n
comment4.params=li
comment4.target=void\ setLike(int[][])
comment4.text=\n\ Receives\ a\ array\ of\ traits\ likeability\ (1,\ 0,\ -1).\ \n\ The\ index\ no.\ is\ the\ trait\ ID\ (e.g.\ genre),\ \n\ the\ values\ are\ the\ likeability\ of\ the\ trait.\ \n\n\ @param\ \ like\ the\ likeability\ of\ the\ trait\n\ @return\ \ \ \ \ the\ sum\ of\ x\ and\ y\n
comment5.params=tr
comment5.target=int\ likeLevel(java.lang.String[])
comment5.text=\n\ Computes\ how\ "liked"\ a\ list\ of\ traits\ corresponding\ to\n\ a\ movie\ or\ whatever\ is.\ \n\n\ @param\ \ \ tr\ \ list\ of\ movie's\ traits\n\ @return\ \ \ \ \ a\ numerical\ score\ of\ how\ liked\ it\ is.\ \n
comment6.params=tr\ pos
comment6.target=int\ likeLevel(java.lang.String[],\ int)
comment6.text=\n\ Computes\ how\ "liked"\ a\ list\ of\ traits\ corresponding\ to\n\ a\ movie\ or\ whatever\ is.\ \n\n\ @param\ \ \ tr\ \ list\ of\ movie's\ traits\n\ @param\ pos\ the\ position\ of\ this\ category\ of\ adjectives\ in\ the\ preference\ table\n\ @return\ \ \ \ \ a\ numerical\ score\ of\ how\ liked\ it\ is.\ \n
comment7.params=low\ high\ type
comment7.target=void\ setRatingRange(float,\ float,\ char)
comment7.text=\n\ Set\ the\ rating\ acceptability\ range.\ \n\n\ @param\ \ low\ \ \ the\ lower\ range\ of\ acceptability\n\ @param\ \ high\ the\ high\ end\ of\ accetability\n\ @param\ \ type\ the\ type\ (r\ for\ rating,\ y\ for\ year)\n
comment8.params=n\ type
comment8.target=boolean\ isWithinRange(float,\ char)
comment8.text=\n\ Checks\ to\ see\ if\ the\ rating\ is\ in\ the\ acceptable\ range\n\n\ @param\ \ r\ the\ rating\ to\ check\n\ @param\ type\ 'r'\ if\ you\ want\ to\ check\ rating,\ 'y'\ for\ year\n\ @return\ \ \ \ \ true\ if\ it\ is\ within\ range\n
comment9.params=likes\ wts
comment9.target=int[]\ multiplyItems(int[],\ int[])
comment9.text=\n\ Combines\ numbers\ in\ the\ first\ array\n\ with\ the\ second\ array's\ (as\ a\ multiplier).\n\n\ @param\ \ likes\ \ \ the\ array\ of\ likeability\n\ @param\ \ wts\ the\ weightings\n\ @return\ an\ int\ array\ of\ each\ item\ multiplied\ together\n
numComments=13
